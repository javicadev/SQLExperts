--Infraestructura y Batería de Pruebas PKG Básico

-- =============================================
--INFRAESTRUCTURA 
-- =============================================

-- INFRAESTRUCTURA DE PRUEBAS
-- Creamos una tabla para registrar los resultados de las pruebas
-- y un procedimiento para registrar los resultados de las pruebas
-- en la tabla de resultados

create table resultados_pruebas (
   id            number
      generated by default as identity
   primary key,
   fecha         date default sysdate,
   nombre_prueba varchar2(100),
   resultado     varchar2(20), -- 'ÉXITO' / 'ERROR'
   detalle       varchar2(500)
);

create or replace procedure registrar_prueba (
   p_nombre_prueba in varchar2,
   p_resultado     in varchar2,
   p_detalle       in varchar2
) is
begin
   insert into resultados_pruebas (
      nombre_prueba,
      resultado,
      detalle
   ) values ( p_nombre_prueba,
              p_resultado,
              p_detalle );
exception
   when others then
      dbms_output.put_line('Error al registrar prueba: ' || sqlerrm);
end;

-- =============================================
-- BATERÍA DE PRUEBAS
-- =============================================

-- SCRIPT PRUEBAS FUNCIONES PL/SQL 1
begin
   -- ===============================
   -- F_OBTENER_PLAN_CUENTA
   -- ===============================

   -- Caso válido
   begin
      declare
         v_plan plan%rowtype;
      begin
         v_plan := pkg_admin_productos.f_obtener_plan_cuenta(101);
         registrar_prueba(
            'F_OBTENER_PLAN_CUENTA - válido',
            'ÉXITO',
            'Plan ID: ' || v_plan.id
         );
      exception
         when others then
            registrar_prueba(
               'F_OBTENER_PLAN_CUENTA - válido',
               'ERROR',
               sqlerrm
            );
      end;
   end;

   -- Cuenta sin plan
   begin
      declare
         v_dummy plan%rowtype;
      begin
         v_dummy := pkg_admin_productos.f_obtener_plan_cuenta(102);
      exception
         when pkg_admin_productos.exception_plan_no_asignado then
            registrar_prueba(
               'F_OBTENER_PLAN_CUENTA - sin plan',
               'ÉXITO',
               'Plan no asignado'
            );
         when others then
            registrar_prueba(
               'F_OBTENER_PLAN_CUENTA - sin plan',
               'ERROR',
               sqlerrm
            );
      end;
   end;

   -- Cuenta inexistente
   begin
      declare
         v_dummy plan%rowtype;
      begin
         v_dummy := pkg_admin_productos.f_obtener_plan_cuenta(99999);
      exception
         when no_data_found then
            registrar_prueba(
               'F_OBTENER_PLAN_CUENTA - inexistente',
               'ÉXITO',
               'NO_DATA_FOUND capturado'
            );
         when others then
            registrar_prueba(
               'F_OBTENER_PLAN_CUENTA - inexistente',
               'ERROR',
               sqlerrm
            );
      end;
   end;

   -- ===============================
   -- F_CONTAR_PRODUCTOS_CUENTA
   -- ===============================
   begin
      declare
         v_total number;
      begin
         v_total := pkg_admin_productos.f_contar_productos_cuenta(101);
         registrar_prueba(
            'F_CONTAR_PRODUCTOS_CUENTA - válida',
            'ÉXITO',
            'Total: ' || v_total
         );
      exception
         when others then
            registrar_prueba(
               'F_CONTAR_PRODUCTOS_CUENTA - válida',
               'ERROR',
               sqlerrm
            );
      end;
   end;

   begin
      declare
         v_dummy number;
      begin
         v_dummy := pkg_admin_productos.f_contar_productos_cuenta(99999);
      exception
         when no_data_found then
            registrar_prueba(
               'F_CONTAR_PRODUCTOS_CUENTA - inexistente',
               'ÉXITO',
               'NO_DATA_FOUND capturado'
            );
         when others then
            registrar_prueba(
               'F_CONTAR_PRODUCTOS_CUENTA - inexistente',
               'ERROR',
               sqlerrm
            );
      end;
   end;

   -- ===============================
   -- F_VALIDAR_ATRIBUTOS_PRODUCTO
   -- ===============================
   begin
      declare
         v_valido boolean;
      begin
         v_valido := pkg_admin_productos.f_validar_atributos_producto(
            '1234567890123',
            101
         );
         if v_valido then
            registrar_prueba(
               'F_VALIDAR_ATRIBUTOS_PRODUCTO - todos presentes',
               'ÉXITO',
               'TRUE'
            );
         else
            registrar_prueba(
               'F_VALIDAR_ATRIBUTOS_PRODUCTO - todos presentes',
               'ÉXITO',
               'FALSE'
            );
         end if;
      exception
         when no_data_found then
            registrar_prueba(
               'F_VALIDAR_ATRIBUTOS_PRODUCTO - no existe',
               'ÉXITO',
               'NO_DATA_FOUND capturado'
            );
         when others then
            registrar_prueba(
               'F_VALIDAR_ATRIBUTOS_PRODUCTO - error',
               'ERROR',
               sqlerrm
            );
      end;
   end;

   -- ===============================
   -- F_NUM_CATEGORIAS_CUENTA
   -- ===============================
   begin
      declare
         v_categorias number;
      begin
         v_categorias := pkg_admin_productos.f_num_categorias_cuenta(101);
         registrar_prueba(
            'F_NUM_CATEGORIAS_CUENTA - válida',
            'ÉXITO',
            'Total: ' || v_categorias
         );
      exception
         when no_data_found then
            registrar_prueba(
               'F_NUM_CATEGORIAS_CUENTA - inexistente',
               'ÉXITO',
               'NO_DATA_FOUND'
            );
         when others then
            registrar_prueba(
               'F_NUM_CATEGORIAS_CUENTA - error',
               'ERROR',
               sqlerrm
            );
      end;
   end;

end;
/